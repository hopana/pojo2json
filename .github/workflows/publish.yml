# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Publish

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - v*

jobs:
  # Prepare and publish the plugin to JetBrains Marketplace repository
  release:
    name: Publish Plugin
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17
          #settings-path: ${{ github.workspace }} # location for the settings.xml file

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: '8.6'
          gradle-home-cache-cleanup: true

      - name: Test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "${{ github.event.release.tag_name }}"

#      # Publish the plugin to JetBrains Marketplace
#      # See https://github.com/JetBrains/intellij-platform-plugin-template
#      - name: Publish Plugin
#        env:
#          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
#          CERTIFICATE_CHAIN: ${{ secrets.CERTIFICATE_CHAIN }}
#          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
#          PRIVATE_KEY_PASSWORD: ${{ secrets.PRIVATE_KEY_PASSWORD }}
#        run: gradle build -x test

#      # Upload artifact as a release asset
#      - name: Upload Release Asset
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: gh release upload ${{ github.event.release.tag_name }} ./build/distributions/*
#
#      # Create a pull request
#      - name: Create Pull Request
#        if: ${{ steps.properties.outputs.changelog != '' }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          VERSION="${{ github.event.release.tag_name }}"
#          BRANCH="changelog-update-$VERSION"
#          LABEL="release changelog"
#
#          git config user.email "action@github.com"
#          git config user.name "GitHub Action"
#
#          git checkout -b $BRANCH
#          git commit -am "Changelog update - $VERSION"
#          git push --set-upstream origin $BRANCH
#
#          gh label create "$LABEL" \
#            --description "Pull requests with release changelog update" \
#            --force \
#            || true
#
#          gh pr create \
#            --title "Changelog update - \`$VERSION\`" \
#            --body "Current pull request contains patched \`CHANGELOG.md\` file for the \`$VERSION\` version." \
#            --label "$LABEL" \
#            --head $BRANCH

